name: "plaso  CI workflow"


on:
  push:
    branches: [ test ]


jobs:

  ubuntu-latest-plaso-build-job:
    name: "build plaso ubuntu latest"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch  \
    - name: "plaso build"
      run: |
        # https://plaso.readthedocs.io/en/latest/sources/user/Installing-with-docker.html
        git clone https://github.com/log2timeline/plaso
        cd plaso/config/docker
        docker build -f Dockerfile .
        #Testing your Plaso Docker image
        docker run log2timeline/plaso log2timeline.py --version
        docker container ls
        docker image ls
        # determine which Plaso processes are running
        top -p `ps -ef | grep log2timeline.py | grep python | awk '{ print $2 }' | tr '\n' ',' | sed 's/,$//'`
    - name: "Copying the Plaso Docker image to a non-Internet connected system"
      run: |
        # https://plaso.readthedocs.io/en/latest/sources/user/Installing-with-docker.html
        git clone https://github.com/log2timeline/plaso
        cd plaso/config/docker
        docker build -f Dockerfile .
        #Testing your Plaso Docker image
        docker run log2timeline/plaso log2timeline.py --version
        docker container ls
        docker image ls
        #  export the image
        docker save <CONTAINER_NAME> | gzip -c > saved_docker_image.tgz
        zcat saved_docker_image.tgz | docker load


  ubuntu-latest-plaso-job:
    name: "plaso ubuntu latest"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "Log2Timeline (Plaso) image modifications"
      run: |
        # Install Log2Timeline
        # https://plaso.readthedocs.io/en/latest/sources/user/Ubuntu-Packaged-Release.html
        # add the GIFT PPA
        sudo add-apt-repository ppa:gift/stable
        apt-get update -qy && apt-get install plaso-tools -qy
        #Log2Timeline
        docker run -d --name wordpress-orig wluns32/wordpress-lamp
        # save the current state of a container, including all the changes to a new image
        docker commit "current state of image" wordpress-orig wordpress-orig-curr
        #makes a tar archive of the image to be imported
        docker export wordpress-orig > evidence_img_wordpress.tar
        # the image has to be streamed through memory to view
        log2timeline.py --process_archives evidence_img_wordpress.plaso evidence_img_wordpress.tar
        # https://github.com/mxmlnkn/ratarmount#installation
        # Dependencies
        apt-get install python3 python3-pip fuse -qy
        # PIP Package Installation
        pip install ratarmount
        mkdir -p /evidence/mount
        ratarmount evidence_img_wordpress.tard /evidence/mount/
             
