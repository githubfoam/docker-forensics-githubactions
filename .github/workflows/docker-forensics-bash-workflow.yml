name: "docker forensics CI workflow"


on:
  push:
    branches: [ test ]


jobs:

  ubuntu-apache2-latest-job:
    name: "apache2 ubuntu latest"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch  
    - name: "os fingerprinting"
      run: |
        docker run -d --name apache2-container -e TZ=UTC -p \
          8080:80 ubuntu/apache2:2.4-21.10_beta
        netstat -plan | grep ":8080"
        netstat -plan
        # curl http://localhost:8080
        docker logs -f apache2-container
        # interactive shell
        # docker exec -it apache2-container /bin/bash

  ubuntu-container-modification-latest-job:
    name: "container modification ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "archlinux" #https://hub.docker.com/_/archlinux
      version: "latest"
      name: "archlinux/blackarch"
      dockerfilename: "Dockerfile.archlinux.blackarch"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "Container modification"
      run: |
        docker run -d --name wordpress wluns32/wordpress-lamp
        container ls
        # find the modifications done to this container respecting to the image 
        #D - Deleted File
        #C - Changed File
        #A - Added File
        docker diff wordpress      
        # download it from the container to check for malicious activity with
        docker cp wordpress:/etc/shadow .
        docker run -d --name wordpress-orig wluns32/wordpress-lamp
        # compare it with the original one running a new container 
        docker cp wordpress-orig:/etc/shadow original_shadow
        diff original_shadow shadow
        # access the container and check it, non-interactive
        docker exec -it wordpress ls -lai /etc/shadow
    - name: "docker build archlinux base"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}/${version} . --file dockerfiles/${dockerfilename} 
        docker image ls
        docker image history ${name}/${version} 
        docker system df -v               
        docker logs -f ${name}/${version} 
        docker diff -f ${name}/${version} 

  ubuntu-image-modification-latest-job:
    name: "image modification ubuntu latest"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "image modifications"
      run: |
        # given an exported docker image
        # use container-diff to extract a summary of the modifications
        #Export the image to a .tar file
        docker save wluns32/wordpress-lamp > image.tar 
        container-diff analyze -t sizelayer image.tar
        container-diff analyze -t history image.tar
        container-diff analyze -t metadata image.tar
        # decompress the image and access the blobs to search for suspicious files 
        tar -xf image.tar
        #Export the image to a .tar file
        docker save flask:latest > image.tar 
        docker load < image.tar 
        # find added/modified files in docker images
        # Red means added and yellow means modified  
        #  no access the content of the different stages of the image      
        dive flask:latest
        tar -xf image.tar
        for d in `find * -maxdepth 0 -type d`; do cd $d; tar -xf ./layer.tar; cd ..; done


  # ubuntu-latest-job:
  #   name: "docker archlinux ubuntu latest"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "archlinux" #https://hub.docker.com/_/archlinux
  #     version: "latest"
  #     name: "archlinux/base"
  #     dockerfilename: "Dockerfile.archlinux"      
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker pull archlinux"
  #     run: sudo docker pull ${distribution}:${version}  && sudo docker image ls  
  #   - name: "docker build archlinux base"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}/${version} . --file dockerfiles/${dockerfilename}
  #       docker image ls
  #       docker image history ${name}/${version}
  #       docker system df -v               
  #       docker image inspect ${name}/${version}
  #   - name: "docker build archlinux network security"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t archlinux:netsec . --file dockerfiles/Dockerfile.archlinux.networksecurity 
  #       docker image ls
  #       docker image history archlinux:netsec
  #       docker system df -v               
  #       docker image inspect archlinux:netsec        
  #   # - name: "run docker ansible local playbook archlinux"
  #   #   run: sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name} ansible-playbook -vvv /home/ansible/playbook.yml --syntax-check -i ./localhost         
  #   # - name: "deploy nxlog"
  #   #   run: sudo make deploy-nxlog-2004 
                         

  # # ubuntu-2004-job:
  # #   name: "nxlog ubuntu  20.04"
  # #   runs-on: ubuntu-latest
  # #   steps:
  # #   - uses: actions/checkout@v2
  # #   - name: "os fingerprinting"
  # #     run: |
  # #       hostnamectl status
  # #       lsb_release -a
  # #       lsb_release -d
  # #       cat /etc/lsb-release
  # #       cat /etc/issue
  # #       cat /etc/os-release
  # #       sudo apt-get install -y neofetch && neofetch   
  # #   - name: "deploy nxlog"
  # #     run: sudo make deploy-nxlog-2004  
        


  # # ubuntu-1804-job:
  # #   name: "nxlog ubuntu-18.04"
  # #   runs-on: ubuntu-18.04
  # #   steps:
  # #   - uses: actions/checkout@v2
  # #   - name: "os fingerprinting"
  # #     run: |
  # #       hostnamectl status
  # #       lsb_release -a
  # #       lsb_release -d
  # #       cat /etc/lsb-release
  # #       cat /etc/issue
  # #       cat /etc/os-release
  # #       sudo apt-get install -y neofetch && neofetch    
  #   # - name: "deploy nxlog"
  #     # The following packages have unmet dependencies:
  #     # mono-xsp4 : Depends: mono-xsp4-base (= 4.2-2.1) but it is not going to be installed
  #     # run: sudo make deploy-nxlog 




